
### Technologies that drive the web

## HTML

#   Structure



## CSS

#   Style



## Javascript

#   Behavior



### Summary

## HTML

# Annotates content

# Defines document structure



## Right and wrong syntax

## 3 Core web Technologies

# HTML, CSS, Javascript



### Standard Organization

# W3C (HTML5, standard)

# WHATWG (HTML, evolving)



### Summary

# History of HTML and it affects us as developers

# Resources for validation

# Resources for feature investigation

# Browser state Resources



### Anatomy of an HTML

<p> demo string .... </p>

Element name: p
Opening tag: <p>
Content: demo string...
Closing tag: </p>



<br>

Line break: br
Opening tag: <br>
No content
No closing tag



<hr>

Horizontal break: hr
Opening tag: <hr>
No content
No closing tag



# Attribute is a name-value pair
<p id="A1234"></p>

Attribute name: id
Attribute value: A1234



### Space

# No space is allowed to exist between the opening bracket and the tag name.
# Similarly, space is not allowed between the opening bracket and the foreword slash of the closing tag.

# However, you must have at least one space between the tag itself and any of its attributes,
# ans space is allowed everywhere else and is simply ignored.



### value surrounded by quotes mark

# It is best practice to always surround the value of the attribute in either single or double quotes.
# It doesn't matter whether you use single or double quotes. 
# They really are equivalent in HTML.


### placeholder

# We have to provide an opening tag and closing tag without any space in-between them to signify,
# and to communicate the lack of content as surrounded by this tag.



### Summary

## Anatomy of an HTML tag

# Opening and closing tag
# Attributes 
# Using double and single quotes
# How to specify tag without any content



### Basic HTML Document Structure

# implemation of "L1_structureOnly.html"



### Summary

## The bare minimum HTML document

## HTML version declaration

# <html>
# <head>
# <meta>: meta tags communicate information to the browser.
# <title>
# <body>

## Sequential (top to bottom) rendering



### HTML Content Models

## Block-level elemetns

# Render to begin on a new line (by default)

# May contain inline, or other block-level elemetns
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# Roughly "Flow content" in HTML5 category
          ^^^^^^^^^^^^^^


## Inline elemetns

# Render on the same line (by default)

# May only contain other inline elements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# Roughly "Phrasing content" in HTML5 category
          ^^^^^^^^^^^^^^^^^^

## HTML5 replaces these definitions with more complex set of content categories

## However, this distinction remains practical because it aligns well with existing CSS rules.



### Summary

# Compared block-level & inline content types.

# Officially not part of HTML5, but still used.

# Rought equivalent to "Flow content" and "Phrasing contet".



### Heading elements( and some new HTML5 semantic comments)

## Semantic: 
# relating to meaning in language or logic

## Semantic html element:
# Element that implies some meaning to the content

# Human and/or machine can inderstand meaning of content surrounded by a semantic element better.

# May help search engine ranking, i.e., SEO (Search Engine Optimization)



### Summary

# Well chosen content of H1 element is crucial to SEO

# Semantic elements allow for a more meaningful expression of the structure of our HTML page

# To sum up, sematic elements do allow you for more meaningful expression of the structure
# of your HTML code, HTML page, but they don't really give you any more functionality
# than a regular "div" or regular "span" would without it.



### Summary of list

# Lists provide a natural and commonly used grouping of content

# Very often, lists are used for structuring navigation portions of the web page



### HTML Character Entity Reference

----------------------------------------------
Instead of          Use
----------------------------------------------
<                   &lt;
----------------------------------------------
>                   &gt;
----------------------------------------------
&                   &amp;
----------------------------------------------
"                   &quot;
----------------------------------------------
Â©                   &copy;
----------------------------------------------



### Summary if HTML character entity Reference

# Help avoid rendering issues

# Safeguard against more limited character encoding

# Provide characters not available on a keyboard



### Links



### The a element

# categories

#   Flow content

#   When the element only contains phrasing content: phrasing content

#   Interactive content

#  a tag in the HTML5 is both an inline element and a block level element at the same time



### Summary of creating links

# Internal linking to other pages in the site

# External linking to other web sites

# Linking to sections of a document



### Pratice

Q:
The following code rendering in the middle section of the page allows someone to directly link 
to that middle section of the page, not just the beginning of the page:

<div id="superInterestingContentHere">Bla Bla</div>

A:
True



### Summary of Image

# Image can enhance your site

# Remember to specify width adn height attrivutes whenever possible



### Summary

# CSS is an incredibly powerful technology

# User experience of content matters



### Anatomy of a CSS rules

p {
    color: blue;
}

Selector: p

Delaration: "color: blue;"

Property: "color:"

Value: "blue"



# Zero or more declarations are allowed

p {
    color: blue;
    font-size: 20px;
    width: 200px;
}



# the collection of these CSS ruels is what's called a style sheet

The following structure is a stylesheet

p {
    color: blue;
    font-size: 20px;
    width: 200px;
}


h1 {
    color: green;
    font-size: 36px;
    text-align: center;
}


### Elements, Class, and ID Selectors

## class Selector

.blue {
    color: blue;
}



Example:

...
<p class="blue">...</p>
<p>...</p>
<div class="blue">...</div>
...


### name Selector

#name {
    color: blue;
}



Example:

...
<p>...</p>
<div id="name">...</div>
...



### Grouping Selector

# This put effect on <div> element and class="blue" element

div, blue {
    color: blue;
}



Example:

...
<p class="blue">...</p>
<p>...</p>
<div>...</div>
...



### Summary

## Syntax simple CCS Selectors

# Element

# Class (define with.)

# id (define with #)



### Summary

## Combining Selectors

# Element with class selector (selector.class)

# Child (direct) selector ( selector > selector )

# Descendent selector ( selector selector )

## Didn't cover

# Adjacent sibling selector (selector + selector)

# General sibling selector (selector ~ selector)



### Pseudo-class selector

## Many pseudo-class selectors exist

## We cover:

#   :link

#   :visited

#   :hover 

#   :active 

#   :nth-child(...)



### Summary of pseudi-class selectors

## Pseudo-class selectors are very powerful.

## Make sure your selector is still readable

# Simple/Readable -> Complicated/Tricky



### Summary of Style Placement

# Placeing styles inline is great for quick testing

# Real sites almost always use external styles

# Head styles are usually there to override external ones



### Some Concepts

# Orgin 

# Merge 

# Inheritance 

# Specificity



### Origin Precedence (when in conflict)

## Simple rule: Last declaration wins

# Remember, HTML is processed sequentially, from top to bottom.

# For precedence, think of external CSS as declared at the spot where it's linked to.



### Origin Precedence (when no conflict)

## Even simpler rule: Declarations Merge



